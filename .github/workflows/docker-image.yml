name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag myprogram:latest
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Tag the Docker image
      run: docker tag myprogram:latest ${{ secrets.DOCKER_USERNAME }}/myprogram:latest
    - name: Push the Docker image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/myprogram:latest

  trivy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: 'docker.io/${{ secrets.DOCKER_USERNAME }}/myprogram:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
  
  sonarqube:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.14.0-alpha.0"
      - name: Install tox and any other packages
        run: |
              pip install tox
              pip install pytest-cov
      - name: Run tox
        run: tox -e py
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}  # Needed to get PR information, if any

  checkov:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v3
    - name: Install Checkov
      run: |
        pip install checkov
    - name: Run Checkov on Kubernetes Manifests
      run: |
        checkov -d 
  
  bandit:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v3
    - name: Install Bandit
      run: |
        pip install bandit
    - name: Run Bandit Security Linter
      run: |
        bandit -r .

  deploy:
    runs-on: ubuntu-latest
    needs: [build, trivy, sonarqube]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install kubectl
      run: |
        sudo apt-get update
        sudo apt-get install -y kubectl

    - name: Set up kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config 

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f myprogram-deployment.yaml --validate=false

    - name: Get pod logs
      run: |
          kubectl get deployment myprogram-deployment
          kubectl logs -l app=myprogram

    - name: Extract and sanitize domains using awk
      run: |
        awk '{gsub(/^https?:\/\//, ""); gsub(/^www\./, ""); gsub(/[[:punct:]]+$/, ""); print tolower($0)}' file.txt | sort -u > sanitized_domains_awk.txt

    - name: Extract and sanitize domains using sed
      run: |
        sed -E 's|https?://||; s|www\.||; s|\.[[:punct:]]*$||; s|\.$||' file.txt | tr '[:upper:]' '[:lower:]' | sort -u > sanitized_domains_sed.txt

    - name: Display sanitized domains from awk
      run: |
        echo "Sanitized Domains (from awk):"
        cat sanitized_domains_awk.txt

    - name: Display sanitized domains from sed
      run: |
        echo "Sanitized Domains (from sed):"
        cat sanitized_domains_sed.txt
